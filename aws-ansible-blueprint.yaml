tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - http://getcloudify.org.s3.amazonaws.com/spec/aws-plugin/1.4.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/aws-ansible-types.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:

  key_name:
    default: ansible-blueprint-key

  private_key_path:
    default: ~/.ssh/ansible-blueprint-key.pem

  vpc_id:
    type: string

  vpc_cidr_block:
    type: string

  subnet_id:
    type: string

  subnet_cidr:
    type: string

  ec2_region_name:
    default: us-east-1

  ec2_region_endpoint:
    default: ec2.us-east-1.amazonaws.com

  availability_zone:
    default: us-east-1e

  ami:
    description: >
      Amazon Ubuntu 14.04 AMI

  instance_type:
    description: >
      Agent VM Instance Type

  agent_user:
    default: ubuntu

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_input: ec2_region_name }
      ec2_region_endpoint: { get_input: ec2_region_endpoint }

node_templates:

  ansible:
    type: ansible.nodes.Ansible
    properties:
      playbook_file_name: main.yaml
      public_ip: { get_attribute: [application_ip, aws_resource_id] }
    relationships:
      - type: ansible.relationships.contained_in
        target: application_host

  mongod:
    type: ansible.nodes.MongoDatabase
    properties:
      public_ip: { get_attribute: [application_ip, aws_resource_id] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: application_host
      - type: ansible.relationships.provisioned_by
        target: ansible

  nodejs:
    type: ansible.nodes.NodecellarApplicationModule
    properties:
      public_ip: { get_attribute: [application_ip, aws_resource_id] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: application_host
      - type: ansible.relationships.provisioned_by
        target: ansible
      - type: node_connected_to_mongo
        target: mongod

  application_host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        install_method: remote
        port: 22
        user: { get_input: agent_user }
        key: { get_property: [ key, private_key_path ] }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      parameters:
          placement: { get_property: [ subnet, availability_zone ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: key
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: application_ip
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: application_security_group

  application_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Security Group for ansible VMs
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: { get_input: vpc_cidr_block }
        - ip_protocol: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 27017
          to_port: 27017
          cidr_ip: { get_input: vpc_cidr_block }
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: subnet_id }
      cidr_block: { get_input: subnet_cidr }
      availability_zone: { get_input: availability_zone }
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  application_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }
      cidr_block: { get_input: vpc_cidr_block }

  key:
    type: cloudify.aws.nodes.KeyPair
    properties:
      aws_config: *aws_config
      resource_id: { get_input: key_name }
      private_key_path: { get_input: private_key_path }

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ application_ip, aws_resource_id ] }
      port: 8080
