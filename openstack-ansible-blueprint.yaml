tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/openstack-ansible-types.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:

  image:
    description: >
      Image to be used when launching agent VM's
    type: string
    default: ''

  flavor:
    description: >
      Flavor of the agent VM's
    type: string
    default: ''

  agent_user:
    description: >
      User for connecting to agent VM's
    type: string
    default: ubuntu

  key_name:
    default: ansible-openstack-key

  private_key_path:
    default: ~/.ssh/ansible-openstack-key.pem
    type: string

  external_network_name:
    default: external

  router_name:
    description: The Router Name

  public_network_name:
    description: The name of the Openstack public network.

  public_subnet_name:
    description: The name of the public network subnet.

  region:
    default: ''
    type: string

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_input: region }

node_templates:

  ansible:
      type: ansible.nodes.Ansible
      properties:
        playbook_file_name: main.yaml
        public_ip: { get_attribute: [application_ip, floating_ip_address] }
      relationships:
        - type: ansible.relationships.contained_in
          target: application_host

  mongod:
    type: ansible.nodes.MongoDatabase
    properties:
      public_ip: { get_attribute: [application_ip, floating_ip_address] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: application_host
      - type: ansible.relationships.provisioned_by
        target: ansible

  nodejs:
    type: ansible.nodes.NodecellarApplicationModule
    properties:
      public_ip: { get_attribute: [application_ip, floating_ip_address] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: application_host
      - type: ansible.relationships.provisioned_by
        target: ansible
      - type: node_connected_to_mongo
        target: mongod

  application_host:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      server:
        image: { get_input: image }
        flavor: { get_input: flavor }
      agent_config:
        user: { get_input: agent_user }
        key: { get_property: [ key, private_key_path ] }
        install_method: remote
        port: 22
      management_network_name: { get_property: [ public_network, resource_id ] }
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: application_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: port
        type: cloudify.openstack.server_connected_to_port

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: application_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: application_ip

  application_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  application_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: openstack_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 22
        - remote_ip_prefix: 0.0.0.0/0
          port: 27017
        - remote_ip_prefix: 0.0.0.0/0
          port: 8080

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_name }
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  key:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_config
      resource_id: { get_input: key_name }
      private_key_path: { get_input: private_key_path }

  ###########################################################
  # This outputs section exposes the application endpoint.
  # You can access it by running:
  #   - cfy deployments -d <deployment_id> outputs
  ###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [application_ip, floating_ip_address] }
      port: 8080
